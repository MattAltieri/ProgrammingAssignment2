library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 /
0
Inf - Inf
my_vector <- 1:20
my_vector
dim(my_vector)
quit()
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
sapply(x, mean)
class(sapply(x, mean))
summary(class(sapply(x, mean)))
summary(sapply(x, mean))
str(sapply(x, mean))
unclass(sapply(x, mean))
is.data.frame(sapply(x, mean))
is.list(sapply(x, mean))
is.matrix(sapply(x, mean))
is.vector(sapply(x, mean))
dim(sapply(x, mean))
names(sapply(x, mean))
x <- list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
?runif
lapply(x, runif, min=0, max=10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3, 2))
x
lapply(x, function(elt), elt[, 1])
lapply(x, function(elt) elt[, 1])
lapply(x, function(elem) elem[, 1])
sapply(x, function(elem) elem[, 1])
typeof(lapply(x, function(elem) elem[, 1]))
x <- list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
lapply(x, mean)
typeof(lapply(x, mean))
sapply(x, mean)
typeof(sapply(x, mean))
class(lapply(x, mean))
str(apply)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 1, sum)
?sum
?rowSums
rowSums(x)
rowMeans(x)
colSums(x)
colMeans(x)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs=c(0.25, 0.75)
)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims=2)
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
?gl
f
tapply(x, f, mean)
tapply(x, f, mean, simplify=F)
tapply(x, f, range)
split(x, f)
lapply(split(x, f), mean)
sapply(split(x, f), mean)
library(datasets)
head(airquality)
str(airquality)
summary(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, ("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=T))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
?interaction
str(split(x, list(f1, f2)))
x
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage
x
printmessage(x)
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#     invisible(x)
}
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x
#     invisible(x)
}
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x
invisible(x)
}
printmessage(x[1])
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
pringmessage2(x)
printmessage2(x)
mean(x)
traceback()
lm(y - x)
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
debug(lm)
lm(y ~ x)
debug(match)
stop
exit
stop
?
help
quit
options(error = recover)
read.csv("nosuchfile")
undebug(match)
options(error = recover)
read.csv("nosuchfile")
read.csv("nosuchfile")
library(datasets)
data(iris)
?iris
names(iris)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean, na.rm=T)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
?apply
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
rm(iris)
data(mtcars)
str(mtcars)
?mtcars
head(mtcars)
str(mtcars)
summary(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars(cyl), mean)
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
summary(mtcars)
avghp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
avghp["4"]
avghp
?abs
abs(avghp["4"] - avgh[["8"]])
abs(avghp["4"] - avghp["8"])
debug(ls)
ls
ls()
undebug(ls)
rm(c(avghp, mtcars))
rm(list("avghp", "mtcars")
)
ls()
lapply(ls(), rm)
ls()
rm(list=ls())
library(datasets)
data(iris)
summary(iris)
head(iris)
tapply(iris$Sepal.Length, iris.Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean, na.rm=T)
apply(iris[, 1:4], 2, mean)
data(mtcars)
summary(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
avghp <- with(mtcars, tapply(hp, cyl, mean))
abs(avghp["4"], avghp["8"])
abs(avghp["4"] - avghp["8"])
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10
cachemean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(1:10)
cachemean(x)
cachemean(x)
m <- matrix(1:16, 4, 4)
m
solve(m)
m <- matrix(c(1:8, 8:1), 4, 4)
m
solve(m)
m <- matrix(, 2, 2)
m
x <- matrix(rnorm(16), 4, 4)
solve(x)
setwd("~/R Studio/Projects/ProgrammingAssignment2")
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/ProgrammingAssignment2")
source("cachematrix.R")
m <- makeCacheMatrix(matrix(rnorm(16, 4, 4)))
solve(m)
solve(m$get)
cacheSolve(m)
solve(m$get)
source("cachematrix.R")
m <- makeCacheMatrix(matrix(rnorm(16, 4, 4)))
solve(m$getMatrix)
traceback()
m
m$getMatrix
m$get
source("cachematrix.R")
m <- matrix(rnorm(1:16), 4, 4)
m
solve(m)
cm <- makeCacheMatrix(m)
cm
cacheSolve(cm)
View(x)
solve(x)
ls()
rm(list=ls())
source("cachematrix.R")
m <- matrix(rnorm(1:16), 4, 4)
m
solve(m)
cm <- makeCacheMatrix(m)
cacheSolve(cm)
cacheSolve(cm)
source("cachematrix.R")
cm <- makeCacheMatrix(m)
solve(m)
cacheSolve(cm)
source("cachematrix.R")
cm <- makeCacheMatrix(m)
solve(m)
cacheSolve(cm)
cacheSolve(cm)
?get
?set
??set
